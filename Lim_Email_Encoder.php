<?php
/**
 * Lim_Email_Encoder Class
 *
 * Protecting email-spamming by replacing them with one of the registered encoding-methods
 *
 * @package  Lim_Email_Encoder
 * @author   Victor Villaverde Laan
 * @version  0.32
 * @link     http://www.freelancephp.net/email-encoder-php-class/
 * @license  MIT license
 */
class Lim_Email_Encoder {

	/**
	 * @var array
	 */
	var $methods = array();

	/**
	 * @var string
	 */
	var $method = NULL;


	/**
	 * PHP4 constructor
	 */
	function Lim_Email_Encoder() {
		$this->__construct();
	}

	/**
	 * PHP5 constructor
	 */
	function __construct( $method = NULL ) {
		// include all available method files
		$this->_load_methods();

		// set method
		$this->set_method( $method );
	}

	/**
	 * Set the encode method to use
	 * @param string $method  can be the name of the method or 'random'
	 * @return $this
	 */
	function set_method( $method ) {
		$this->method = $this->_get_method( $method );

		return $this;
	}

	/**
	 * Encode the given email into an encoded HTML link
	 * @param string $email
	 * @param string $display Optional, if not set display will be the email
	 * @param string $method Optional, else the default setted method will; be used
	 * @return string
	 */
	function encode( $email, $display = NULL, $method = NULL ) {
		// decode entities
		$email = html_entity_decode( $email );

		// set email as display
		if ( $display === NULL )
			$display = $email;

		// set encode method
		if ( $method === NULL ) {
			$method = $this->method;
		} else {
			$method = $this->_get_method( $method );
		}

		// get encoded email code
		return call_user_func( $method, $email, $display );
	}

	/**
	 * Convert randomly chars to htmlentities
	 * This method is partly taken from WordPress
	 * @link http://codex.wordpress.org/Function_Reference/antispambot
	 * @static
	 * @param string $value
	 * @return string
	 */
	function get_htmlent( $value ) {
		// check if antispambot WordPress function exists
		if ( function_exists( 'antispambot' ) ) {
			$enc_value = antispambot( $value );
		} else {
			$enc_value = '';
			srand( (float) microtime() * 1000000 );

			for ( $i = 0; $i < strlen( $value ); $i = $i + 1 ) {
				$j = floor( rand( 0, 1 ) );

				if ( $j == 0 ) {
					$enc_value .= '&#' . ord( substr( $value, $i, 1 ) ).';';
				} elseif ( $j == 1 ) {
					$enc_value .= substr( $value, $i, 1 );
				}
			}
		}

		$enc_value = str_replace( '@', '&#64;', $enc_value );

		return $enc_value;
	}

	/**
	 * Load available methods
	 * @return void
	 */
	function _load_methods() {
		$method_dir = dirname(__FILE__) . '/methods';
		$handle = opendir( $method_dir );

		// dir not found
		if ( ! $handle )
			return;

		// include all methods inside the method folder
		while ( false !== ($file = readdir($handle)) ) {
			if ( '.php' == substr( $file, -4 ) ) {
				require_once $method_dir . '/' . $file;

				$name = substr( $file, 0, -4 );
				$fn = 'lim_email_' . $name;

				if ( function_exists( $fn ) ) {
					// set method with info
					$this->methods[$fn] = ( isset( ${ $fn } ) ) 
										? ${ $fn }
										: array( 'name' => $name, 'description' => $name );
				}
			}
		}

		closedir( $handle );
	}

	function _get_method( $method ) {
		$method = strtolower( $method );

		if ( 'random' == $method ) {
			// set a random method
			$method = array_rand( $this->methods );
		} else {
			// add 'lim_email_' prefix if not already set
			$method = ( strpos( $method, 'lim_email_' ) !== FALSE ) ? $method : 'lim_email_' . $method;

			if ( ! key_exists( $method, $this->methods ) )
				$method = 'lim_email_html_encode'; // set default method
		}

		return $method;
	}

} // end class Lim_Email_Encoder

/*?> // ommit closing tag, to prevent unwanted whitespace at the end of the parts generated by the included files */